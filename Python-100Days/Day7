#練習3:設計一函數返回指定文件名的副檔名 
    # def get_suffix(filename, has_dot=False): #has_dot=False 表示檔名內有.
    #     pos = filename.rfind('.') #rfind為返回str的最高索引(意即最後一個.可以避免檔名有多個.,沒有.則回傳-1)
    #     if 0 < pos < len(filename) - 1: #因為長度是以1...開始算,而下標是以0...開始算 所以長度-1=下標
    #         index = pos if has_dot else pos + 1 #pos是.的位置,+1就是.的右邊第一個位置
    #         return filename[index:]
    #     else:
    #         return ''
    # print(get_suffix('123.jpg'))
#練習4:設計一函數返回一列表中的最大值與第二大值
    # def max2(x):
    #     m1, m2 = (x[0], x[1]) if x[0] > x[1] else (x[1], x[0]) #將數字倆倆比較,把數字大的放在m1,數字小放m2
    #     for index in range(2, len(x)):#index依序取出下一位數字,重複至整個turple
    #         if x[index] > m1:#將下一位數字與m1比較,如果比m1大,則將m1推移至m2,再將index輸入m1,淘汰掉m2較小的數字
    #             m2 = m1
    #             m1 = x[index]
    #         elif x[index] > m2:#將下一位數字與m2比較,直接將index輸入m2
    #             m2 = x[index]
    #     return m1, m2
    # turple1 =(3,4,33,12,312,5,3,2,5,1,2)
    # max2(turple1)
    #Q.為什麼一定是turple? 不能是list嗎?
#練習5:計算指定的年月日是這一年的第幾天
    # def is_leap_year(year):
    #     return year % 4 == 0 and year % 100 != 0 or year % 400 == 0

    # def which_day(year, month, date):
    #     days_of_month = [
    #         [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    #         [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    #     ][is_leap_year(year)] #語法為list=[[A],[B]][True(傳入第一個列表)/False(傳入第二個列表)]
    #     total = 0
    #     for index in range(month - 1):#將搜尋月份前面的月份天數累加
    #         total += days_of_month[index]
    #     return total + date#補上最後的date

    # def main():
    #     print(which_day(1980, 11, 28))
    #     print(which_day(1981, 12, 31))
    #     print(which_day(2018, 1, 1))
    #     print(which_day(2016, 3, 1))
    # if __name__ == '__main__':
    #     main()
#練習6.打印楊輝三角(☆☆☆):
    # def main():
    #     num = int(input('Number of rows: '))
    #     yh = [[]] * num# yh為個含有空列表的列表,*num 就會產生num個空列表
    #     for row in range(len(yh)): #range 2 則回傳 0,1 "兩"個數字,len則直觀看有幾個資料就顯示長度為多少
    #         yh[row] = [None] * (row + 1) #乘以多個None放入列表,先以None填充列表之後再替換值
    #         for col in range(len(yh[row])):
    #             if col == 0 or col == row:
    #                 yh[row][col] = 1 #因為yh內含兩層列表,yh[row][col]表示第一層的第row個下標內的第col下標位置
    #             else:
    #                 yh[row][col] = yh[row - 1][col] + yh[row - 1][col - 1] #利用前一個list的下標0和下標1相加以此類推達到楊輝三角的目的
    #             print(yh[row][col], end='\t') #\t表示換行
    #         print()

    # if __name__ == '__main__':
    #     main()
    #概念是先創建一個列表內含數個列表,先用None填充空的列表使得具有長度,再利用運算式將數字放回列表打印出

#練習7.雙色球選號:(經我修正:D)
    # from random import randint,randrange,sample

    # def display(balls):
    #     for index, ball in enumerate(balls):#enumerate()的功能為對一個可遍歷的數據列出索引index,數據ball兩個值
    #         if index == len(balls) -1: #因為索引都會比長度-1 當索引=長度-1 就是最後
    #             print('|',end =' ')
    #             print('%02d' % ball)
    #             return
    #         print('%02d' % ball, end=' ') #%02d為整數2位,不足左側補0

    # def random_select():
    #     red_balls = [x for x in range(1,34)] #red_balls有1~33號
    #     selected_balls = []
    #     selected_balls = sample(red_balls,6) #sample功能為隨機挑出不重複的資料
    #     selected_balls.sort() #將序列由小排到大
    #     selected_balls.append(randint(1,16)) #特別號(出現在列表的最後一位)
    #     return selected_balls

    # def main():
    #     n = int(input('下注幾次: '))
    #     for _ in range(n):
    #         display(random_select())

    # if __name__ == '__main__':
    #     main()

#練習8:15位卑鄙的基督徒(由某一位從1開始,依序報數,數字為9則死,再由下一位從1開始)
    # def main():
    #     persons = [True] * 30
    #     counter,index,number = 0,0,0
    #     while counter < 15: #共15個死人
    #         if persons[index]:
    #             number += 1 #為一個計數器,計到9次的時候將person此時的index改為false
    #             if number == 9:
    #                 persons[index]= False 
    #                 counter += 1 #死人+1
    #                 number = 0 #重新計數
    #         index += 1 
    #         index %= 30 #30個數完後,重新數的設置
    #     for person in persons:
    #         print('基' if person else '非', end='') #True的位置為基,False的位置為非

    # if __name__ == '__main__':
    #     main()

#練習9:井字棋遊戲(充滿bug的coding->輸入訊息限制太大,部分已修正)
    # import os

    # def print_board(board):
    #     print(board['TL'] + '|' + board['TM'] + '|' + board['TR'])
    #     print('-+-+-')
    #     print(board['ML'] + '|' + board['MM'] + '|' + board['MR'])
    #     print('-+-+-')
    #     print(board['BL'] + '|' + board['BM'] + '|' + board['BR'])

    # def main():
    #     init_board = {
    #         'TL': ' ', 'TM': ' ', 'TR': ' ',
    #         'ML': ' ', 'MM': ' ', 'MR': ' ',
    #         'BL': ' ', 'BM': ' ', 'BR': ' '
    #     }
    #     begin = True
    #     while begin:
    #         curr_board = init_board.copy()
    #         begin = False
    #         turn = 'x'
    #         counter = 0 #counter=步數
    #         os.system('cls')
    #         print_board(curr_board)
    #         while counter < 9:
    #             move = input('轮到%s走棋, 请输入位置: ' % turn)
    #             if curr_board[move] == ' ':
    #                 counter += 1
    #                 curr_board[move] = turn
    #                 if turn == 'x':
    #                     turn = 'o'
    #                 else:
    #                     turn = 'x'
    #             os.system('cls')
    #             print_board(curr_board)
    #         choice = input('再玩一局?(yes|no)')
    #         begin = choice == 'yes' #觸發while begin 是否再次循環

    # if __name__ == '__main__':
    #     main()
