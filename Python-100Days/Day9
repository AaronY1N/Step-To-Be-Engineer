#Case1.奧特曼打怪獸
from abc import ABCMeta,abstractclassmethod
from random import randint,randrange

class Fighter(object,metaclass=ABCMeta): #戰鬥人員類別,ABCMeta使其成為"抽象類別"
    __slots__ = ('_name','_hp') #利用slots綁定成員的變量,防止其他變量汙染
    
    def __init__(self,name,hp):
        self._name = name
        self._hp = hp
    
    @property
    def name(self):
        return self._name
    
    @property
    def hp(self):
        return self._hp
    
    @hp.setter
    def hp(self,hp): #設定血量
        self._hp = hp if hp >=0 else 0 #小於0則顯示0
    
    @property
    def alive(self): #判斷是否存活
        return self._hp > 0
    
    @abstractclassmethod
    def attack(self,other):
        pass #不做任何事,繼續程式

class Ultraman(Fighter): #設定人物,繼承Fighter這個類別
    __slots__ = ('_name', '_hp', '_mp')
    def __init__(self, name, hp, mp):
        super().__init__(name, hp) #繼承Fighter的name,hp
        self._mp = mp #新增mp這個屬性給 Ultraman
    
    def attack(self,enemy): #攻擊將enemy的血量扣除15~25
        enemy.hp -= randint(15, 25)
    
    def huge_attack(self,enemy):
        if self._mp >=50:
            self._mp -= 50
            injury = enemy.hp *3 // 4 # 打掉3/4的血量
            injury = injury if injury >= 50 else 50 #至少讓injury = 50
            enemy.hp -= injury
            return True #使用成功返回 True
        else:
            self.attack(enemy)
            return False #使用失敗返回 False

    def magic_attack(self,enemys): #群體攻擊 enemy->enemys(之後會用ms列表傳入)
        if self._mp >= 20:
            self._mp -= 20
            for temp in enemys: #遍歷列表中每一個怪物
                if temp.alive: #先判別是否存活
                    temp.hp -= randint(15, 20)
            return True
        else:
            return False
    
    def resume(self): #恢復mp
        increase_mp = randint(1,10)
        self.hp += increase_mp
        return increase_mp
    
    def __str__(self):
        return '%s奧特曼:\n' % self._name + '生命值: %d\n' % self._hp + '魔法值: %d\n' % self._mp

class Monster(Fighter):#怪物屬性,繼承Fighter的類別
    __slots__ = ('_name','_hp')

    def attack(self,enemy):
        enemy.hp -= randint(10, 20)

    def __str__(self):
        return '%s怪獸:\n' % self._name + '生命值: %d\n' %self._hp
    
def is_any_alive(monsters): #判別怪獸是否活著,monsters之後會是一個列表[]內涵所有的monster
    for monster in monsters: 
        if monster.alive > 0: #因為monster有繼承Fighter的屬性,所以可以使用alive
            return True
    return False

def select_alive_one(monsters): #從monsters列表中選定一個活著的怪獸
    monsters_len = len(monsters) #列表長度
    while True:
        index = randrange(monsters_len) #randrange採用range的取法,從0開始不含上限 所以不用額外-1
        monster = monsters[index]
        if monster.alive > 0:
            return monster

def display_info(ultraman,monsters): #回合結束顯示雙方的狀態
    print(ultraman)
    for monster in monsters: #將每一隻怪獸都顯示一次
        print(monster, end='')

def main(): #主程式
    u = Ultraman('名字', 1000 , 120)#Ultraman這個類別要給予name,hp,mp參數
    m1 = Monster('A',250)#Monster這個類別要給予name,hp參數
    m2 = Monster('B',500)
    m3 = Monster('C',1000)
    ms =[m1, m2, m3] #待會作為monsters傳入用
    fight_round = 1
    while u.alive and is_any_alive(ms): #當雙方都活著的時候->戰鬥
        print('========第%02d回合========' % fight_round)
        m = select_alive_one(ms) #m為當前選定的怪獸,從中選取一存活的怪獸
        skill = randint(1, 10) #用隨機數的方式選定使用的技能,同時可限制技能的機率
        if skill <= 6: #60%為普通攻擊
            print('%s使用普通攻擊打了%s.' % (u.name, m.name))
            u.attack(m)
            print('%s的魔法值恢复了%d点.\n' % (u.name, u.resume())) #每次攻擊完回復mp
        elif skill <= 9:
            if u.magic_attack(ms):#魔力足夠才發動,不足則失敗
                print('%s使用了魔法攻击.' % u.name)
            else:
                print('%s使用魔法失败.' % u.name) 
        else:
            if u.huge_attack(m):#會先判定魔力是否足夠
                print('%s使用究極必殺技打了%s.' % (u.name, m.name))
            else:
                print('%s使用普通攻擊打了%s.' % (u.name, m.name))
                print('%s的魔法值恢复了%d点.\n' % (u.name, u.resume()))
        if m.alive > 0: #m.alive會連接到m.hp,所以m.alive->為當前血量
            print('%s反擊了%s.\n' % (m.name, u.name)) 
            m.attack(u) #怪物存活則反擊
        display_info(u,ms) #每回合結束後顯示雙方狀態
        fight_round += 1 #回合數+1
    print('\n========戰鬥结束!========\n') #任一方全體血量<0,跳出while迴圈
    if u.alive > 0:
        print('%s奥特曼勝利!' % u.name)
    else:
        print('怪獸群勝利!')

if __name__ == '__main__':
    main()

#Case2.撲克遊戲
