########################################################Case1.奧特曼打怪獸########################################################
from abc import ABCMeta,abstractclassmethod
from random import randint,randrange

class Fighter(object,metaclass=ABCMeta): #戰鬥人員類別,ABCMeta使其成為"抽象類別"
    __slots__ = ('_name','_hp') #利用slots綁定成員的變量,防止其他變量汙染
    
    def __init__(self,name,hp):
        self._name = name
        self._hp = hp
    
    @property
    def name(self):
        return self._name
    
    @property
    def hp(self):
        return self._hp
    
    @hp.setter
    def hp(self,hp): #設定血量
        self._hp = hp if hp >=0 else 0 #小於0則顯示0
    
    @property
    def alive(self): #判斷是否存活
        return self._hp > 0
    
    @abstractclassmethod
    def attack(self,other):
        pass #不做任何事,繼續程式

class Ultraman(Fighter): #設定人物,繼承Fighter這個類別
    __slots__ = ('_name', '_hp', '_mp')
    def __init__(self, name, hp, mp):
        super().__init__(name, hp) #繼承Fighter的name,hp
        self._mp = mp #新增mp這個屬性給 Ultraman
    
    def attack(self,enemy): #攻擊將enemy的血量扣除15~25
        enemy.hp -= randint(15, 25)
    
    def huge_attack(self,enemy):
        if self._mp >=50:
            self._mp -= 50
            injury = enemy.hp *3 // 4 # 打掉3/4的血量
            injury = injury if injury >= 50 else 50 #至少讓injury = 50
            enemy.hp -= injury
            return True #使用成功返回 True
        else:
            self.attack(enemy)
            return False #使用失敗返回 False

    def magic_attack(self,enemys): #群體攻擊 enemy->enemys(之後會用ms列表傳入)
        if self._mp >= 20:
            self._mp -= 20
            for temp in enemys: #遍歷列表中每一個怪物
                if temp.alive: #先判別是否存活
                    temp.hp -= randint(15, 20)
            return True
        else:
            return False
    
    def resume(self): #恢復mp
        increase_mp = randint(1,10)
        self.hp += increase_mp
        return increase_mp
    
    def __str__(self):
        return '%s奧特曼:\n' % self._name + '生命值: %d\n' % self._hp + '魔法值: %d\n' % self._mp

class Monster(Fighter):#怪物屬性,繼承Fighter的類別
    __slots__ = ('_name','_hp')

    def attack(self,enemy):
        enemy.hp -= randint(10, 20)

    def __str__(self):
        return '%s怪獸:\n' % self._name + '生命值: %d\n' %self._hp
    
def is_any_alive(monsters): #判別怪獸是否活著,monsters之後會是一個列表[]內涵所有的monster
    for monster in monsters: 
        if monster.alive > 0: #因為monster有繼承Fighter的屬性,所以可以使用alive
            return True
    return False

def select_alive_one(monsters): #從monsters列表中選定一個活著的怪獸
    monsters_len = len(monsters) #列表長度
    while True:
        index = randrange(monsters_len) #randrange採用range的取法,從0開始不含上限 所以不用額外-1
        monster = monsters[index]
        if monster.alive > 0:
            return monster

def display_info(ultraman,monsters): #回合結束顯示雙方的狀態
    print(ultraman)
    for monster in monsters: #將每一隻怪獸都顯示一次
        print(monster, end='')

def main(): #主程式
    u = Ultraman('名字', 1000 , 120)#Ultraman這個類別要給予name,hp,mp參數
    m1 = Monster('A',250)#Monster這個類別要給予name,hp參數
    m2 = Monster('B',500)
    m3 = Monster('C',1000)
    ms =[m1, m2, m3] #待會作為monsters傳入用
    fight_round = 1
    while u.alive and is_any_alive(ms): #當雙方都活著的時候->戰鬥
        print('========第%02d回合========' % fight_round)
        m = select_alive_one(ms) #m為當前選定的怪獸,從中選取一存活的怪獸
        skill = randint(1, 10) #用隨機數的方式選定使用的技能,同時可限制技能的機率
        if skill <= 6: #60%為普通攻擊
            print('%s使用普通攻擊打了%s.' % (u.name, m.name))
            u.attack(m)
            print('%s的魔法值恢复了%d点.\n' % (u.name, u.resume())) #每次攻擊完回復mp
        elif skill <= 9:
            if u.magic_attack(ms):#魔力足夠才發動,不足則失敗
                print('%s使用了魔法攻击.' % u.name)
            else:
                print('%s使用魔法失败.' % u.name) 
        else:
            if u.huge_attack(m):#會先判定魔力是否足夠
                print('%s使用究極必殺技打了%s.' % (u.name, m.name))
            else:
                print('%s使用普通攻擊打了%s.' % (u.name, m.name))
                print('%s的魔法值恢复了%d点.\n' % (u.name, u.resume()))
        if m.alive > 0: #m.alive會連接到m.hp,所以m.alive->為當前血量
            print('%s反擊了%s.\n' % (m.name, u.name)) 
            m.attack(u) #怪物存活則反擊
        display_info(u,ms) #每回合結束後顯示雙方狀態
        fight_round += 1 #回合數+1
    print('\n========戰鬥结束!========\n') #任一方全體血量<0,跳出while迴圈
    if u.alive > 0:
        print('%s奥特曼勝利!' % u.name)
    else:
        print('怪獸群勝利!')

if __name__ == '__main__':
    main()

########################################################Case2.撲克遊戲☆☆########################################################
#需額外理解__str__ 跟 __repr__的功用,sort的語法使用方式
import random

class Card(object): #定義一張牌的類別屬性
    
    def __init__(self, suite, face):
        self._suite = suite
        self._face = face
    
    @property 
    def face(self):
        return self._face
    
    @property
    def suite(self):
        return self._suite

    def __str__(self): #__str__會顯示"非正式"的字符串顯示
        if self.face == 1: #將1,11,12,13 轉成英文表示,此時已經是str型式
            face_str = 'A'
        elif self._face == 11:
            face_str = 'J'
        elif self._face == 12:
            face_str = 'Q'
        elif self._face == 13:
            face_str = 'K'
        else:
            face_str = str(self._face) #將數字轉成str型式
        return '%s%s' %(self._suite , face_str) #self._suite=花色 face_str=數字
        
    def __repr__(self): #將對象轉為解釋器讀取模式->此時__str__==__repr__ 才會正確顯示
        return self.__str__()
#__str__和__repr__兩者非隨意定義的函數,是一種控制表達方式的函數
class Poker(object): #定義一副牌的類別屬性
    def __init__(self):
        self._cards = [Card(suite, face) for suite in '♠♥♣♦' for face in range(1,14)]
        #Card類別包含suite,face兩種參數,另外range是1~14不包含上限
        #self._cards現在是一個含有13項的列表,每一項由一個花色+數字組成
        self._current = 0 #當作index標示列表的第0個位置
    
    @property
    def cards(self): #利用property確保cards只能夠被讀取
        return self._cards
    
    def shuffle(self): #定義shuffle這個函數觸發random.shuffle的效果
        self._current = 0 #重新從0號位置開始
        random.shuffle(self._cards) #random.shuffle可將列表的元素隨機換位

    @property
    def next(self): #發牌
        card = self._cards[self._current] #初始self._current為0(表示第一張)
        self._current += 1
        return card
    
    @property
    def has_next(self): #判斷是否可以抽取下一張
        return self._current <len(self._cards)

class Player(object):
    
    def __init__(self, name):
        self._name = name
        self._cards_on_hand = [] #起手定義為一個空列表
    
    @property
    def name(self):
        return self._name
    
    @property
    def cards_on_hand(self):
        return self._cards_on_hand
    
    def get(self, card): #摸牌
        self._cards_on_hand.append(card) #加入到手牌->原始是空列表的那個
    
    def arrange(self, card_key): #將手牌排序
        self._cards_on_hand.sort(key=card_key) #sort(key=___) 後方的東西為sort主要排序的依據

def get_key(card): #得到排序依據的函數
    return(card.suite, card.face)

def main():
    p = Poker() 
    p.shuffle()
    players =[Player('玩家1'),Player('玩家2'),Player('玩家3'),Player('玩家4')]
    for _ in range(13): #重複13次
        for player in players:
            player.get(p.next) #每個人抽一張
    for player in players:
        print(player.name + ':', end=' ')
        player.arrange(get_key) #利用get_key函數拿到card.suite,card.face的值,放入arrange函數成為card_key使其成為排序依據
                                #同時因為觸發card類別裡的suite跟face,將顯示方式改成repr,顯示才會正確
        print(player.cards_on_hand)

if __name__ =='__main__':
    main()
    
########################################################Case3.工資結算系統########################################################
from abc import ABCMeta,abstractclassmethod

class Employee(object,metaclass=ABCMeta): #創建一抽象類別
    def __init__(self, name):
        self._name = name
    
    @property #一般的裝飾器
    def name(self):
        return self._name
    
    @abstractclassmethod #聲明抽象方法的裝飾器
    def get_salary(self):
        pass

class Manager(Employee): #經理類別
    def get_salary(self): #基礎薪資
        return 15000.0

class Programmer(Employee): #程序員類別
    def __init__(self, name, working_hour=0): #因為新增了一個參數working_hour 所以必須super
        super().__init__(name)
        self._working_hour = working_hour
    
    @property
    def working_hour(self):
        return self._working_hour
    
    @working_hour.setter #設定工時特性
    def working_hour(self, working_hour):
        self._working_hour = working_hour if working_hour > 0 else 0 
    
    def get_salary(self):
        return 150.0 * self._working_hour

class Salesman(Employee): #銷售員類別
    def __init__(self, name, sales=0): #因為新增一sales參數,所以要super
        super().__init__(name)
        self._sales = sales
    
    @property
    def sales(self):
        return self._sales
    
    @sales.setter #設定sales特性
    def sales(self, sales):
        self._sales = sales if sales > 0 else 0
    
    def get_salary(self):
        return 1200.0 + self._sales *0.05

def main():
    employees = [Manager('A經理'),Manager('B經理'),Salesman('A銷售員'),Programmer('A程序員')]
    for emp in employees: #遍歷每一位employees
        if isinstance(emp, Programmer): #isinstance表示識別存在Programmer這個類別的人
            emp.working_hour = int(input('請輸入%s本月工作時間: ' % emp.name))
        elif isinstance(emp, Salesman): #isinstance表示識別存在Salesman這個類別的人
            emp.sales = float(input('請輸入%s本月銷售額: ' % emp.name))
        print('%s本月工資為: %sNT' % (emp.name , emp.get_salary()))

if __name__ == '__main__':
    main() 

