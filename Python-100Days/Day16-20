1.生成式的用法
prices = {
    'AAPL': 191.88,
    'GOOG': 1186.96,
    'IBM': 149.24,
    'ORCL': 48.44,
    'ACN': 166.89,
    'FB': 208.09,
    'SYMC': 21.29
}
prices2 = {key: value for key, value in prices.items() if value > 100} 
  #因為字典的形式是{key:value},所以可以直接使用key,value來鎖定我們需要的條件
  #items()是遍歷整個字典的內容(即所有key跟value)
  #解析成key:value鍵值對, for當 , key跟value 是 prices.items()的值時, 如果value >100 
print(prices2)

2.列表嵌套的寫法(列表內含列表) 
names = ['A','B','C','D']
course_name = ['國文','英文','數學','自然','社會']
scores = [[None]*len(course_name) for _ in range (len(names))]
for row , name in enumerate(names): #enumerate會輸出['下標(0-4)','內容(A,B,C,D)
    for col, cours in enumerate(course_name):#enumerate會輸出['下標(0-5)','內容(國,英,數,自,社)
        scores[row][col] = float(input(f'請輸入{name}的{course_name}成績: ')) #利用f'可以讓{}內的直接取用該值
print(scores)
#目前還有許多bug在裡面，例如輸入成績時直接按下enter就會發生錯誤，可以再加入許多異常發生時候要如何應對的擴充。

3.排序(可以跟Sort比較差異)
#使用Sort排序的時候會改變原本list的順序，而key=lambda x: x['依據']是抓取排序後資料的index
import heapq

list1 = [34, 25, 12, 99, 87, 63, 58, 78, 88, 92]
list2 = [
    {'name': 'IBM', 'shares': 100, 'price': 91.1},
    {'name': 'AAPL', 'shares': 50, 'price': 543.22},
    {'name': 'FB', 'shares': 200, 'price': 21.09},
    {'name': 'HPQ', 'shares': 35, 'price': 31.75},
    {'name': 'YHOO', 'shares': 45, 'price': 16.35},
    {'name': 'ACME', 'shares': 75, 'price': 115.65}
]
print(heapq.nlargest(3, list1))
print(heapq.nsmallest(3, list1))
print(heapq.nlargest(2, list2, key=lambda x: x['price']))
print(heapq.nlargest(2, list2, key=lambda x: x['shares']))
#heapq的特性是會把該列表所有的內容印出，而不是只是給予依據的值(例如只給price,shares)

4.循環工具模塊itertools
# 產生ABCD的全部排列
itertools.permutations('ABCD')#ABCD,ABDC,ACBD,ACDB,ADBC,ADCB...4!種排列方式，也可以用('ABCD',2)挑兩個做排列，此時AB,BA是不同的。
# 產生從ABCDE取3個作排列(與permutations的差別是，ABC = ACB 所以只會挑出'C5取3'不須做排列
itertools.combinations('ABCDE', 3)
# 產生ABCD和123的乘積(兩兩相乘)->又稱為笛卡爾積
itertools.product('ABCD', '123') #A1,A2,A3,B1,B2,B3...
# 產生ABC的無限循環列
itertools.cycle(('A', 'B', 'C')) #A,B,C,A,B,C...無限循環

5.窮舉法(概念像是給定一條式子內含多種變數，依序控制變數，使其循環測試找出最佳解)
for x in range(20):
    for y in range(33):
        z = 100 - x - y
        if 5 * x + 3 * y + z // 3 == 100 and z % 3 == 0:
            print(x, y, z)
            
6.貪婪法(概念像是給定一最大值限制，將列表內的內容物由大到小排列，從大數字開始累加，直到最靠近最大值後停止)
class Thing(object):
    def __init__(self, name, price, weight):
        self.name = name
        self.price = price
        self.weight = weight
    
    @property
    def value(self): #每單位重量所具有的價格,用於比較價值
        return self.price / self.weight

def input_thing():
    name_str, price_str, weight_str = input().split() #split.()默認功能會將'空白'&'空字串'作為分割,再形成一個列表
    return name_str, int(price_str), int(weight_str)

def main():
    max_weight, num_of_things = map(int, input().split()) #輸入最大重量，物品數量
    #map的格式(function, iterable),function輸入我們所要使用的函數，iterable輸入迭代的對象
    #此處的function 是int 迭代對象是input,意思就是把input的東西全部轉換成int的格式
    all_things = []
    for _ in range(num_of_things):#迭代次數為物品數量
        all_things.append(Thing(*input_thing())) #輸入各物品的名字/價格/重量
    all_things.sort(key=lambda x:x.value, reverse=True) #reverse=True 表示由大到小排序
    total_weight = 0
    total_price = 0
    for thing in all_things:
        if total_weight + thing.weight <= max_weight:
            print(f'小偷拿走了{thing.name}')
            total_weight += thing.weight
            total_price += thing.price
    print(f'總價值: {total_price}美元')
#這段程式執行後，不會出現任何內容，要直接輸入格式(這點使得程式相當不自由)，值得修正。

7.分治法(將主問題分割成小部分處理)
def quick_sort(items, comp=lambda x, y: x <= y): #comp=lambda隱匿函數(回傳參數x,y其中x <= y)
    items = list(items)[:] #[:]稱為淺層複製，將排列完的列表複製到items當中
    _quick_sort(items, 0, len(items) -1, comp)#向_quick_sort傳入items,0,len(items)-1,comp四個參數值
    return items

def _quick_sort(items, start, end, comp): #start = 0 ,end= len(items) - 1 因為兩兩比較所以-1
    if start < end:
        pos = _partition(items, start, end, comp) #start = 0,end=len(items) - 1
        _quick_sort(items, start, pos - 1, comp)
        _quick_sort(items, pos + 1, end, comp)    

def _partition(items, start, end, comp): 
    pivot = items[end] #最後一個元素的index為 len(items) - 1,所以items[end]是最後一個元素
    i = start - 1 #開始的時候 i = -1
    for j in range(start, end): #當前方出現比末位置還大的數字時，if的內容就不會啟動，就可以達到緩緩將數字較大的向末位推進
        if comp(items[j],pivot): #第一位和和末位的元素利用comp函數比大小
            i += 1
            items[i], items[j] = items[j], items[i]
    items[i + 1], items[end] = items[end], items[i + 1]
    return i + 1

def main():
    print(quick_sort([8,1,5,2,7]))

if __name__ =='__main__':
    main()

8.試探法(騎士巡禮,規則自行查詢)
import sys
import time

SIZE = 5 #製作一個5*5大小的棋盤
total = 0 #方法數

def print_board(board):
    for row in board:
        for col in row: #因為board是雙嵌套list,所以用雙循環將每一個元素取出
            print(str(col).center(4), end='') #center(4)->將col放置中央位置,總長度為4,默認用空白填充
        print()
#用這樣的方式可以將一個list轉成一行一行的,可以記下來使用

def patrol(board, row, col, step=1):
    if row >= 0 and row < SIZE and \
        col >= 0 and col < SIZE and \
        board[row][col] == 0:
        board[row][col] = step
        if step == SIZE * SIZE: #走到25時停止並輸出方法數,走法
            global total
            total += 1
            print(f'第{total}種走法: ')
            print_board(board)
        patrol(board, row - 2, col - 1, step + 1)
        patrol(board, row - 1, col - 2, step + 1)
        patrol(board, row + 1, col - 2, step + 1)
        patrol(board, row + 2, col - 1, step + 1)
        patrol(board, row + 2, col + 1, step + 1)
        patrol(board, row + 1, col + 2, step + 1)
        patrol(board, row - 1, col + 2, step + 1)
        patrol(board, row - 2, col + 1, step + 1)
        #巡禮走法規則,按照規則做+-即可
        board[row][col] = 0

def main():
    board = [[0]* SIZE for _ in range(SIZE)] 
    #board此時為[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
    patrol(board, SIZE -1, SIZE -1)

if __name__ =='__main__':
    main()

9.動態規劃

def main():
    items = list(map(int, input().split()))
    overall = partial = items[0]
    for i in range(1, len(items)): #原本是用雙循環解決,改成用動態規劃的方式降低時間複雜度
        partial = max(items[i], partial + items[i]) 
        overall = max(partial, overall)
    print(overall)


if __name__ == '__main__':
    main()
 
10.

